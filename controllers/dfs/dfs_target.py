my_map = [
    ['0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0',
     'E'],
    ['0', '0', '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '0', '0', '0', '0',
     '0'],
    ['0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1',
     '1'],
    ['0', '0', '1', '1', '0', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '1',
     '1'],
    ['0', '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
     '0'],
    ['0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
     '0'],
    ['1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0',
     '0'],
    ['1', '1', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1',
     '0'],
    ['0', '0', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1',
     '0'],
    ['0', '0', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1',
     '0'],
    ['0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '1',
     '0'],
    ['1', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0',
     '0'],
    ['1', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
     '0'],
    ['1', '1', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '1', '0',
     '0'],
    ['0', '0', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '1', '0', '0', '1', '0',
     '0'],
    ['0', '0', '1', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0',
     '0'],
    ['0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
     '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0', '0',
     '0'],
    ['1', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '1', '0', '0', '0',
     '0'],
    ['1', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '0',
     '0'],
    ['0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0',
     '0'],
    ['0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0',
     '0'],
    ['0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0',
     '0'],
    ['S', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0',
     '0'],
]
MAP_SIZE = len(my_map)

class DFS():
    def __init__(self):
        # MAP_SIZE = len(my_map)
        self.step = [
            [-1, 0],
            [1, 0],
            [0, 1],
            [0, -1]
        ]
        self.route_type = ['U', 'D', 'R', 'L']
        self.route_pos = [dict() for i in range(MAP_SIZE*MAP_SIZE)]
        self.route_length = 0
        self.route = list(my_map)
        self.is_visited = [[0 for i in range(MAP_SIZE)] for j in range(MAP_SIZE)]
        self.reach = 0

    def dfs(self, my_map, MAP_SIZE, x, y):
        if x < 0 or y < 0 or x >= MAP_SIZE or y >= MAP_SIZE:
            return
        if self.is_visited[x][y] == 1:
            return
        if my_map[x][y] == '1':
            return
        if my_map[x][y] == 'E':
            # print_route()
            self.reach = 1
            return
        self.is_visited[x][y] = 1
        for i in range(4):
            next_x = x + self.step[i][0]
            next_y = y + self.step[i][1]
            temp = self.route[x][y]
            self.route[x][y] = self.route_type[i]
            self.route_pos[self.route_length]['x'] = x
            self.route_pos[self.route_length]['y'] = y
            self.route_length += 1
            self.dfs(my_map, MAP_SIZE, next_x, next_y)
            if self.reach == 1:
                return
            self.route_length -= 1
            self.route[x][y] = temp

    def getTarget(self):
        self.target = []
        for i in range(self.route_length):
            x_n = -self.route_pos[i]['x'] + 11
            y_n = self.route_pos[i]['y'] - 12
            x = (2 * x_n + 1) * 0.0625
            y = (2 * y_n + 1) * 0.0625
            self.target.append([x, y])
        return self.target


# dfs = DFS()
# dfs.dfs(my_map, MAP_SIZE, MAP_SIZE-1, 0)
# print("Route length: {}".format(dfs.route_length))
# # target = []
# # for i in range(dfs.route_length):
# #     x_n = -dfs.route_pos[i]['x'] + 11
# #     y_n = dfs.route_pos[i]['y'] - 12
# #     x = (2*x_n + 1)*0.0625
# #     y = (2*y_n + 1)*0.0625
# #     target.append([x, y])
# # # print(target)
# print(dfs.getTarget())